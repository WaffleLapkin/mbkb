//! CDC-ACM serial port example using polling in a busy loop.
#![no_std]
#![no_main]

extern crate panic_semihosting;

use stm32f1xx_hal as hal;

use cortex_m::asm::delay;
use cortex_m_rt::entry;
use embedded_hal::digital::v2::OutputPin;
use hal::usb::{Peripheral, UsbBus};
use hal::{prelude::*, stm32};
use usb_device::{bus, prelude::*};
use usbd_serial::{SerialPort, USB_CLASS_CDC};

#[entry]
fn main() -> ! {
    let dp = stm32::Peripherals::take().unwrap();
    let core = hal::pac::CorePeripherals::take().unwrap();

    let mut flash = dp.FLASH.constrain();
    let mut rcc = dp.RCC.constrain();

    let clocks = rcc
        .cfgr
        .use_hse(8.mhz())
        .sysclk(48.mhz())
        .pclk1(24.mhz())
        .freeze(&mut flash.acr);

    assert!(clocks.usbclk_valid());

    let mut delay = hal::delay::Delay::new(core.SYST, clocks);

    // Configure the on-board LED (PC13, green)
    let mut gpioc = dp.GPIOC.split(&mut rcc.apb2);
    let mut led = gpioc.pc13.into_push_pull_output(&mut gpioc.crh);
    led.set_high().ok(); // Turn off

    let mut gpioa = dp.GPIOA.split(&mut rcc.apb2);

    // BluePill board has a pull-up resistor on the D+ line.
    // Pull the D+ pin down to send a RESET condition to the USB bus.
    // This forced reset is needed only for development, without it host
    // will not reset your device when you upload new firmware.
    let mut usb_dp = gpioa.pa12.into_push_pull_output(&mut gpioa.crh);
    usb_dp.set_low().ok();
    delay.delay_ms(10u16);

    let usb = Peripheral {
        usb: dp.USB,
        pin_dm: gpioa.pa11,
        pin_dp: usb_dp.into_floating_input(&mut gpioa.crh),
    };
    let usb_bus = UsbBus::new(usb);

    let mut serial = SerialPort::new(&usb_bus);

    let mut usb_dev = UsbDeviceBuilder::new(&usb_bus, UsbVidPid(0x16c0, 0x27dd))
        .manufacturer("Fake company")
        .product("Serial port")
        .serial_number("TEST")
        .device_class(USB_CLASS_CDC)
        .build();

    let mut counter: u8 = 0;

    loop {
        if !usb_dev.poll(&mut [&mut serial]) {
            continue;
        }

        serial.write(b"Test (").ok();
        write_u8(&mut serial, counter).ok();
        serial.write(b") ...\n\r").ok();

        counter = counter.wrapping_add(1);
        // delay.delay_ms(10u16);

        // if !usb_dev.poll(&mut [&mut serial]) {
        //     continue;
        // }
        // led.set_high().ok(); // Turn off

        // let mut buf = [0u8; 64];

        // match serial.read(&mut buf) {
        //     Ok(count) if count > 0 => {
        //         led.set_low().ok(); // Turn on

        //         // Echo back in upper case
        //         for c in buf[0..count].iter_mut() {
        //             if 0x61 <= *c && *c <= 0x7a {
        //                 *c &= !0x20;
        //             }
        //         }

        //         let mut write_offset = 0;
        //         while write_offset < count {
        //             match serial.write(&buf[write_offset..count]) {
        //                 Ok(len) if len > 0 => {
        //                     write_offset += len;
        //                 }
        //                 _ => {}
        //             }
        //         }
        //     }
        //     _ => {}
        // }
    }
}

fn write_u8(serial: &mut SerialPort<impl bus::UsbBus>, this: u8) -> usb_device::Result<usize> {
    fn inner(serial: &mut SerialPort<impl bus::UsbBus>, mut c: u8) -> usb_device::Result<usize> {
        if c == 0 {
            return Ok(0);
        }

        let rem = c % 10;
        c -= rem;
        c /= 10;
        let mut w = inner(serial, c)?;
        w += serial.write(&[b'0' + rem])?;

        Ok(w)
    }

    match this {
        0 => serial.write(&[b'0']),
        _ => inner(serial, this),
    }
}

// //! Blinks an LED
// //!
// //! This assumes that a LED is connected to pc13 as is the case on the blue pill board.
// //!
// //! Note: Without additional hardware, PC13 should not be used to drive an LED, see page 5.1.2 of
// //! the reference manual for an explanation. This is not an issue on the blue pill.

// #![deny(unsafe_code)]
// #![no_std]
// #![no_main]

// use panic_halt as _;

// use nb::block;

// use cortex_m_rt::entry;
// use embedded_hal::digital::v2::OutputPin;
// use stm32f1xx_hal::{pac, prelude::*, timer::Timer};

// #[entry]
// fn main() -> ! {
//     // Get access to the core peripherals from the cortex-m crate
//     let cp = cortex_m::Peripherals::take().unwrap();
//     // Get access to the device specific peripherals from the peripheral access crate
//     let dp = pac::Peripherals::take().unwrap();

//     // Take ownership over the raw flash and rcc devices and convert them into the corresponding
//     // HAL structs
//     let mut flash = dp.FLASH.constrain();
//     let mut rcc = dp.RCC.constrain();

//     // Freeze the configuration of all the clocks in the system and store the frozen frequencies in
//     // `clocks`
//     let clocks = rcc.cfgr.freeze(&mut flash.acr);

//     // Acquire the GPIOC peripheral
//     let mut gpioc = dp.GPIOC.split(&mut rcc.apb2);

//     // Configure gpio C pin 13 as a push-pull output. The `crh` register is passed to the function
//     // in order to configure the port. For pins 0-7, crl should be passed instead.
//     let mut led = gpioc.pc13.into_push_pull_output(&mut gpioc.crh);
//     // Configure the syst timer to trigger an update every second
//     let mut timer = Timer::syst(cp.SYST, &clocks).start_count_down(1.hz());

//     // Wait for the timer to trigger an update and change the state of the LED
//     loop {
//         block!(timer.wait()).unwrap();
//         led.set_high();
//         block!(timer.wait()).unwrap();
//         led.set_low();
//     }
// }
